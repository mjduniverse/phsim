/**
 * TypeDefGen constructor
 * 
 * @constructor
 * @param {TypeDefGen.Type[]} types 
 * 
 */

function TypeDefGen(types) {

    /**
     * @type {TypeDefGen.Type[]}
     */

    this.types = types;
}

TypeDefGen.Property = function(type,name,desc) {
    this.type = type;
    this.name = name;
    this.desc = desc;
}

TypeDefGen.Type = function (name,type,widgetProperties,desc) {
    this.name = name;
    this.type = type;
    this.widgetProperties = widgetProperties;
    this.desc = desc;
}

/**
 * 
 * @param {TypeDefGen.Property} typeDefProperty 
 * @property {}
 * @returns {String} - The String
 */

TypeDefGen.generatePropertyDoc = function(typeDefProperty) {
    return `* @property {${typeDefProperty.type}} ${typeDefProperty.name} - ${typeDefProperty.desc}`;
}

/**
 * Make the first letter of the string lower case
 * @param {String} string
 * @returns {String} 
 */

TypeDefGen.lowerCaseFirst = function(string) {
    var strArr = Array.from(string);
    strArr[0] = string[0].toLowerCase();
    return strArr.toString().replace(/,/g,"");
}

/**
 * 
 * @param {TypeDefGen.Type} typeDefDoc 
 */

TypeDefGen.generateWidgetDoc = function(typeDefDoc) {
    var a = [];

    a.push("/**");
    a.push(`* @typedef {${typeDefDoc.type}|${typeDefDoc.name}}`)

    if(typeDefDoc.desc) {
        a.push("* " + typeDefDoc.desc);
    }
    
    for(var i = 0; i < typeDefDoc.widgetProperties.length; i++) {
        a.push(TypeDefGen.generatePropertyDoc(typeDefDoc.widgetProperties[i]));
    }

    a.push("*/");
    a.push(" ")

    return a.toString().replace(/,/g,"\n");
}

/**
 * @typedef {Object} TypeDefGen.Type
 * @property {String} name - The name of the widget
 * @property {WidgetProperties[]} properties - The Property Object
 */


/**
 * @typedef {Object} AdditionalSprite
 * @property {Boolean} additionalSprite
 */

/**
 * @typedef {WFunctionOptions} Clone
 * @property {Vector} - Vector for initial velocity
 * @property {Boolean} copyWidgets
 * @property {Boolean} timeCloner
 * @property {Boolean} clone
 */

/**
 * @typedef {WFunctionOptions} InputBox
 * @property {String} text
 * @property {String} buttonTxt
 * @property {String} name
 * @property {Boolean} inputBox
 */


/**
 * Generate Documentation String 
 * NOTICE: Contains newlines
 * 
 */

TypeDefGen.prototype.generateDocs = function() {

    var a = [];

    for(var i = 0; i < this.types.length; i++) {
        a.push(TypeDefGen.generateWidgetDoc(this.types[i]));
    }

    return a.toString().replace(/,/g,"\n");
}



const fs = require('fs');

var content = "";

/**
 * Get array of widget types
 */

TypeDefGen.prototype.getTypeList = function() {
    
    var a = [];

    for(var i = 0; i < this.types.length; i++) {
        a.push(this.types[i].name);
    }

    return a;
}

/**
 * Get array of widget type names that have the first letter as a lower case letter.
 */

TypeDefGen.prototype.getLowerTypeList = function() {

    var a = this.getTypeList();

    for(var i = 0; i < a.length; i++) {
        a[i] = TypeDefGen.lowerCaseFirst(a[i]);
    }

    return a;
}

/**
 * Generate union type for all widget types
 */

TypeDefGen.prototype.generateUnionType = function() {
    return "/** \n * @typedef {" + this.getTypeList().toString().replace(/,/g,"|") + "} Widget \n*/";
}



TypeDefGen.prototype.boolKeyAssignment = "k";
TypeDefGen.prototype.boolKeyAssignment_lc = "k_lc"

/**
 * Generate array of widget identifiers
 */

TypeDefGen.prototype.generateWidgetBoolKeys = function() {
    return this.boolKeyAssignment + " = " + JSON.stringify(this.getTypeList()) + ";";
}

TypeDefGen.prototype.generateLowercaseWidgetBoolKeys = function() {
    return this.boolKeyAssignment_lc + " = " + JSON.stringify(this.getLowerTypeList()) + ";";
}

TypeDefGen.handleErr = function(err) {

        if(err) {
            throw "Error wrting file: " + err;
        }

        else {
            console.log("Writing...")
        }
}

TypeDefGen.prototype.buildFile = function(fileName) {
    
    var typeDefGen = this;

    console.log("List of types specified:" + typeDefGen.getTypeList() + "\n");

    const fs = require("fs");

    fs.writeFile(fileName,"// Generated by TypeDefGen module \n",function(e,n) {
        if(e) {
            throw e;
        }
    });

    fs.appendFile(fileName,"// Built on " + new Date() + "\n",TypeDefGen.handleErr);

    fs.appendFile(fileName,typeDefGen.generateWidgetBoolKeys() + "\n",TypeDefGen.handleErr);
    fs.appendFile(fileName,typeDefGen.generateLowercaseWidgetBoolKeys() + "\n",TypeDefGen.handleErr);

    fs.appendFile(fileName,"\n \n \n",TypeDefGen.handleErr);

    fs.appendFile(fileName,typeDefGen.generateDocs() + "\n",TypeDefGen.handleErr);

    fs.appendFile(fileName,typeDefGen.generateUnionType() + "\n",TypeDefGen.handleErr);

    console.log("File Generated");

}

module.exports = TypeDefGen;